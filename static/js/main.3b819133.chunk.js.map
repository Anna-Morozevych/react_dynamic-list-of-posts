{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","PostsList","selectedUser","saveSelectedPost","selectedPost","useState","postsList","setPostsList","useEffect","userId","fetch","then","response","json","posts","className","map","post","title","type","onClick","id","NewCommentForm","postId","addNewComment","name","setName","email","setEmail","body","setBody","inputHandler","event","target","value","onSubmit","preventDefault","method","headers","JSON","stringify","addComments","placeholder","onChange","required","PostDetails","currentPost","setCurrentPost","commentsList","setCommentsList","isHideComment","setIsHideComment","buttonName","setButtonName","getPostComments","comments","deleteHandler","commentId","deleteComments","deletedComment","filter","comment","hidden","length","newComment","App","users","setUsers","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","isOpenPost","setIsOpenPost","allUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b819133.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useState, useEffect } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUser: number,\n  saveSelectedPost: (postId: number) => void,\n  selectedPost: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  saveSelectedPost,\n  selectedPost,\n}) => {\n  const [postsList, setPostsList] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUser)\n      .then(posts => setPostsList(posts));\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsList && (\n          postsList.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  {`User #${post.userId} `}\n                </b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => saveSelectedPost(post.id)}\n              >\n                {selectedPost === post.id ? (\n                  'Close'\n                ) : (\n                  'Open'\n                )}\n              </button>\n            </li>\n          )))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  if (userId === 0) {\n    return fetch(`${BASE_URL}/posts`)\n      .then(response => response.json());\n  }\n\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { addComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number | undefined,\n  addNewComment: (newComment: Comments) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addNewComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'email':\n        setEmail(event.target.value);\n        break;\n\n      case 'body':\n        setBody(event.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const addCommentsHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (postId) {\n      addComments(postId, name, email, body)\n        .then(response => {\n          addNewComment(response);\n        });\n    }\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={addCommentsHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={inputHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={inputHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={inputHandler}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const deleteComments = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(response => response.json());\n};\n\nexport const addComments = (\n  postId: number,\n  name: string,\n  email: string,\n  body:string,\n) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  })\n    .then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComments, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\n  const [commentsList, setCommentsList] = useState<Comments[]>([]);\n  const [isHideComment, setIsHideComment] = useState(false);\n  const [buttonName, setButtonName] = useState('Hide');\n\n  useEffect(() => {\n    if (selectedPost) {\n      getPostDetails(selectedPost)\n        .then(post => setCurrentPost(post));\n\n      getPostComments(selectedPost)\n        .then(comments => setCommentsList(comments));\n    }\n  }, [selectedPost]);\n\n  const hideShowButtonHandler = () => {\n    setIsHideComment(!isHideComment);\n\n    if (isHideComment) {\n      setButtonName('Hide');\n    } else {\n      setButtonName('Show');\n    }\n  };\n\n  const deleteHandler = (commentId: number) => {\n    deleteComments(commentId)\n      .then(deletedComment => {\n        if (deletedComment) {\n          setCommentsList(\n            commentsList.filter(comment => comment.id !== commentId),\n          );\n        }\n      });\n  };\n\n  const addNewComment = (newComment: Comments) => {\n    setCommentsList([\n      ...commentsList,\n      newComment,\n    ]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{currentPost?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          hidden={commentsList.length === 0}\n          onClick={hideShowButtonHandler}\n        >\n          {`${buttonName} ${commentsList.length}\n          ${(commentsList.length === 1) ? 'comment' : 'comments'}` }\n        </button>\n\n        {commentsList.length > 0 ? (\n          <ul\n            className=\"PostDetails__list\"\n            hidden={isHideComment}\n          >\n            {commentsList.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteHandler(comment.id)}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p\n            className=\"PostDetails__list-item\"\n          >\n            No comments yet\n          </p>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={currentPost?.id}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isOpenPost, setIsOpenPost] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(allUsers => setUsers(allUsers));\n  }, []);\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const saveSelectedPost = (postId: number) => {\n    setSelectedPostId(postId);\n\n    if (postId !== selectedPostId) {\n      setIsOpenPost(true);\n    } else {\n      setIsOpenPost(false);\n      setSelectedPostId(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUserId}\n            selectedPost={selectedPostId}\n            saveSelectedPost={saveSelectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isOpenPost && (\n            <PostDetails\n              selectedPost={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}